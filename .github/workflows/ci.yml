# file: .github/workflows/rag-ci.yml
name: RAG CI (Ollama real + cache)

on:
  push:
  pull_request:

jobs:
  eval:
    runs-on: ubuntu-latest
    env:
      PYTHONUNBUFFERED: "1"
      CHAT_MODEL: "phi3:mini"          # modelo real para chat
      EMBED_MODEL: "nomic-embed-text"  # modelo real para embeddings
      DB_PATH: "./chroma_db"
      DOCS_PATH: "./materiales"
      COLLECTION: "capacitacion"
      OLLAMA_HOST: "127.0.0.1:11434"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---------- Python + pip cache ----------
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt

      - name: Install Python deps
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      # ---------- Node + npm cache (para promptfoo global) ----------
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Cache npm (global)
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: npm-${{ runner.os }}-node20-promptfoo
          restore-keys: |
            npm-${{ runner.os }}-node20-

      - name: Install promptfoo
        run: npm i -g promptfoo

      # ---------- Ollama real + cache de modelos ----------
      - name: Cache Ollama models
        uses: actions/cache@v4
        with:
          path: ~/.ollama
          key: ollama-${{ runner.os }}-phi3mini-nomicembed
          restore-keys: |
            ollama-${{ runner.os }}-

      - name: Install Ollama
        run: |
          curl -fsSL https://ollama.com/install.sh | sh

      - name: Start Ollama
        run: |
          nohup ollama serve > ollama.log 2>&1 &
          # espera a /api/tags
          for i in {1..60}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:11434/api/tags || true)
            if [ "$code" = "200" ]; then echo "OK Ollama /api/tags"; break; fi
            sleep 2
          done

      - name: Pull models (cached)
        run: |
          ollama pull $EMBED_MODEL
          ollama pull $CHAT_MODEL

      # ---------- Indexado + servidor ----------
      - name: Generate training PDF
        run: python generate_training_pdf.py

      - name: Build index
        run: python build_index.py

      - name: Start API server
        run: |
          nohup uvicorn server:app --host 0.0.0.0 --port 8000 > server.log 2>&1 &
          echo $! > server.pid

      - name: Wait for /health
        run: |
          for i in {1..60}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/health || true)
            if [ "$code" = "200" ]; then echo "OK /health"; exit 0; fi
            sleep 2
          done
          echo "Timeout /health"; tail -n +1 server.log ollama.log; exit 1

      - name: (Optional) Ingest KPIs snippet
        run: |
          curl -s -X POST http://localhost:8000/ingest_text \
            -H "Content-Type: application/json" \
            -d '{"source_name":"kpis.md","text":"SecciÃ³n de KPIs:\nCSAT, NPS, FCR, AHT, SLA con metas y descripciones."}' \
          | tee ingest_kpis.json

      # ---------- Promptfoo ----------
      - name: Run promptfoo eval
        run: |
          test -f promptfooconfig.yaml || (echo "faltante: promptfooconfig.yaml"; exit 1)
          test -f tests.yaml || (echo "faltante: tests.yaml"; exit 1)
          promptfoo eval -c promptfooconfig.yaml -c tests.yaml || (echo "::error ::Promptfoo failures"; exit 1)

      # Reportes adicionales
      - name: Run promptfoo (JSON + Markdown + JUnit)
        if: always()
        run: |
          export PROMPTFOO_TELEMETRY=0
          mkdir -p .promptfoo
          promptfoo eval -c promptfooconfig.yaml -c tests.yaml --format json     --output .promptfoo/results.json || true
          promptfoo eval -c promptfooconfig.yaml -c tests.yaml --format markdown --output .promptfoo/report.md || true
          promptfoo eval -c promptfooconfig.yaml -c tests.yaml --format junit    --output .promptfoo/promptfoo.junit.xml || true

      - name: Publish Promptfoo summary
        if: always()
        run: |
          echo "## Promptfoo Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          test -f .promptfoo/report.md && cat .promptfoo/report.md >> $GITHUB_STEP_SUMMARY || echo "_no markdown report_"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: rag-ci-artifacts
          path: |
            server.log
            ollama.log
            ingest_kpis.json
            .promptfoo/**

      - name: Cleanup
        if: always()
        run: |
          kill $(cat server.pid) || true
